// Prisma schema file for Personal Finance Dashboard
// Database: PostgreSQL on Railway

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Basic Info
  name     String  @db.VarChar(50)
  email    String  @unique @db.VarChar(255)
  password String  @db.VarChar(255)

  // Settings
  currency        String   @default("USD") @db.VarChar(3)
  timezone        String   @default("America/New_York") @db.VarChar(50)
  dateFormat      String   @default("MM/DD/YYYY") @db.VarChar(20)
  weekStartsOn    Int      @default(0) // 0 = Sunday, 1 = Monday
  theme           String   @default("light") @db.VarChar(10)
  notifications   Boolean  @default(true)
  emailReminders  Boolean  @default(true)
  lastLogin       DateTime?
  isActive        Boolean  @default(true)

  // Financial Summary (computed fields stored for performance)
  totalBalance    Decimal  @default(0) @db.Decimal(12, 2)
  monthlyIncome   Decimal  @default(0) @db.Decimal(12, 2)
  monthlyExpenses Decimal  @default(0) @db.Decimal(12, 2)

  // Relationships
  transactions Transaction[]
  budgets      Budget[]
  bills        Bill[]
  goals        Goal[]

  @@map("users")
}

model Transaction {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Transaction Details
  type        String   @db.VarChar(10) // 'income' or 'expense'
  amount      Decimal  @db.Decimal(12, 2)
  category    String   @db.VarChar(50)
  description String?  @db.VarChar(255)
  date        DateTime
  account     String   @db.VarChar(50)

  // Optional Fields
  tags        String?  @db.VarChar(255) // Comma-separated tags
  location    String?  @db.VarChar(100)
  receipt     String?  @db.VarChar(255) // File path
  isRecurring Boolean  @default(false)
  recurringPattern String? @db.VarChar(20) // 'weekly', 'monthly', 'yearly'

  // References
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@index([userId, category])
  @@index([userId, type])
  @@map("transactions")
}

model Budget {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Budget Details
  category  String  @db.VarChar(50)
  budgeted  Decimal @db.Decimal(10, 2)
  spent     Decimal @default(0) @db.Decimal(10, 2)
  remaining Decimal @default(0) @db.Decimal(10, 2)

  // Time Period
  month     Int
  year      Int
  isActive  Boolean @default(true)

  // Settings
  alertThreshold Decimal? @db.Decimal(5, 2) // Alert when spent percentage reaches this
  rollover       Boolean  @default(false)   // Roll over unused budget

  // References
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, category, month, year])
  @@index([userId, month, year])
  @@map("budgets")
}

model Bill {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Bill Details
  name        String   @db.VarChar(100)
  amount      Decimal  @db.Decimal(10, 2)
  dueDate     DateTime
  isPaid      Boolean  @default(false)
  category    String   @db.VarChar(50)

  // Optional Details
  description String?  @db.VarChar(255)
  vendor      String?  @db.VarChar(100)
  account     String?  @db.VarChar(50)
  website     String?  @db.VarChar(255)
  confirmationNumber String? @db.VarChar(100)

  // Recurring Settings
  isRecurring Boolean @default(false)
  frequency   String? @db.VarChar(20) // 'monthly', 'quarterly', 'yearly'
  
  // Reminder Settings
  reminderDays Int @default(3) // Days before due date to remind
  
  // Payment Details
  paidDate   DateTime?
  paidAmount Decimal?  @db.Decimal(10, 2)
  
  // References
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, dueDate])
  @@index([userId, isPaid])
  @@map("bills")
}

model Goal {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Goal Details
  name          String   @db.VarChar(100)
  targetAmount  Decimal  @db.Decimal(12, 2)
  currentAmount Decimal  @default(0) @db.Decimal(12, 2)
  targetDate    DateTime?
  category      String   @db.VarChar(50)

  // Optional Details
  description   String?  @db.VarChar(500)
  priority      String   @default("medium") @db.VarChar(10) // 'high', 'medium', 'low'
  isCompleted   Boolean  @default(false)
  completedDate DateTime?

  // Auto-contribution Settings
  autoContribute Boolean @default(false)
  contributionAmount Decimal? @db.Decimal(10, 2)
  contributionFrequency String? @db.VarChar(20) // 'weekly', 'monthly'

  // References
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isCompleted])
  @@index([userId, targetDate])
  @@map("goals")
}
